{"version":3,"sources":["components/head.js","utils/ResultContext.js","components/radioForm.js","components/results.js","components/body.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","ResultContext","React","createContext","db","sort","filter","RadioForm","context","useContext","action","id","type","name","onChange","ResultContainer","resultItems","map","resultItem","firstName","lastName","position","Salary","styles","bigPad","minHeight","littlePad","centerText","textAlign","test","backgroundColor","height","Body","useState","sortedArray","resultListState","a","b","console","log","JSON","stringify","setResultList","filteredArray","employee","toLowerCase","includes","Provider","value","style","pad","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.856a329e.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"../styles/header.css\"\r\n\r\n\r\nfunction Header(){\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-sm-1\">\r\n            </div>\r\n            <div className=\"col-sm-10 header-container\">\r\n                    Employee Directory\r\n            </div>\r\n            <div className=\"col-sm-1\">\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\n// default context object with properties corresponding to Provider values\r\nconst ResultContext = React.createContext({\r\n    db: [],\r\n    sort: () => undefined,\r\n    filter: () => undefined\r\n});\r\n\r\nexport default ResultContext;\r\n  ","import React, { useContext } from \"react\"\r\nimport \"../styles/radioForm.css\"\r\nimport ResultContext from \"../utils/ResultContext\"\r\n\r\nfunction RadioForm(){\r\n    const context = useContext(ResultContext)\r\n    return(\r\n            <div className=\"col-sm-3 query-container\">\r\n            <div className=\"col-sm-12\">\r\n                <form action=\"\">\r\n                    <div className=\"radio-container\">\r\n                        <input id=\"descRadio\" type=\"radio\" name=\"sort\" onChange={context.sort}/><label>Sort by Descending Salary</label>\r\n                        <br/>\r\n                        <input id=\"ascRadio\" type=\"radio\" name=\"sort\" onChange={context.filter}/><label>Filter: Management only</label>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default RadioForm","import React, { useContext } from \"react\";\r\nimport ResultContext from \"../utils/ResultContext\"\r\nimport \"../styles/results.css\"\r\n\r\nfunction ResultContainer(){\r\n    const results = useContext(ResultContext)\r\n    const resultItems = results.db.map((resultItem) => \r\n            <tr className=\" row\">\r\n                <td className=\"col-sm-3\">\r\n                    {resultItem.firstName}\r\n                </td> \r\n                <td className=\"col-sm-3\">\r\n                    {resultItem.lastName}\r\n                </td> \r\n                <td className=\"col-sm-3\">\r\n                    {resultItem.position}\r\n                </td> \r\n                <td className=\"col-sm-3\">\r\n                    {resultItem.Salary}\r\n                </td>   \r\n            </tr>\r\n    )\r\n    return ( \r\n        <div className=\"col-sm-12\">\r\n            <div className=\"col-sm-12\" id=\"header\">\r\n                Employee Directory\r\n            </div>\r\n            \r\n            <table className=\"list-group search-results\">\r\n                <tr className=\"row\">\r\n                    <th className=\"col-sm-3\">First Name</th>\r\n                    <th className=\"col-sm-3\">Last Name</th>\r\n                    <th className=\"col-sm-3\">Position</th>\r\n                    <th className=\"col-sm-3\">Salary</th>\r\n                </tr>\r\n                    {resultItems}\r\n                </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultContainer","import React, { useState } from \"react\";\r\nimport \"../styles/body.css\"\r\nimport RadioForm from \"./radioForm\";\r\nimport ResultContainer from \"./results.js\"\r\nimport ResultContext from \"../utils/ResultContext\"\r\nimport db from \"../db.json\";\r\n\r\nconst styles = {\r\n    bigPad:{\r\n      minHeight: 80 \r\n    },\r\n    littlePad: {\r\n        minHeight: 26\r\n    },\r\n    centerText:{\r\n        textAlign: \"center\"\r\n    },\r\n    test: {\r\n        backgroundColor: \"red\",\r\n        height: 400\r\n    }\r\n  }\r\n \r\n    function Body(){\r\n        const [resultListState, setResultList] = useState({\r\n            db: db,\r\n            sort: sortList,\r\n            filter: filterList\r\n        })\r\n\r\n        function sortList() {\r\n            const sortedArray = resultListState.db.sort((a,b) => (a.Salary < b.Salary) ? 1: -1)\r\n            console.log(\"Directory sorted by descending salary: \" + JSON.stringify(sortedArray))\r\n            return setResultList({...resultListState, db: sortedArray})\r\n        }\r\n\r\n        function filterList(){\r\n            var filteredArray = resultListState.db.filter(function(employee) {\r\n             return employee.position.toLowerCase().includes(\"manager\") ;\r\n            });\r\n            console.log(\"Directory filtered to contain only management: \" + JSON.stringify(filteredArray))\r\n            return setResultList({...resultListState, db: filteredArray})\r\n        }\r\n\r\n    return (\r\n        <ResultContext.Provider value={resultListState}>\r\n            <div className=\"col-sm-12\">\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-2\">\r\n                </div>\r\n                <div className=\"col-sm-8 body-container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-sm-12\" style={styles.bigPad}>\r\n\r\n                        </div>\r\n                        <div className=\"col-sm-1\">\r\n\r\n                        </div>\r\n                        <RadioForm\r\n                        />\r\n                        <div className=\"col-sm-1\">\r\n\r\n                        </div>\r\n                        <div className=\"col-sm-6 employee-card\">\r\n                            <ResultContainer/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ResultContext.Provider>\r\n    )\r\n}\r\n\r\nexport default Body","import React from 'react';\nimport Header from \"./components/head\"\nimport Body from \"./components/body.js\" \n\nconst styles = {\n  pad:{\n    minHeight: 70\n  }\n}\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <div className=\"col-sm-12\" style = {styles.pad}>\n      </div>\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}